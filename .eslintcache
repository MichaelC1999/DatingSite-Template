[{"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\index.js":"1","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\Store\\reducer.js":"2","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\App.js":"3","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\UnAuth.js":"4","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Modal\\Modal.js":"5","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Navbar\\Navigation.js":"6","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Auth.js":"7","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Basic.js":"8","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Forgot.js":"9","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Starter.js":"10","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\MatchList\\MatchList.js":"11","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Reset.js":"12","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\UserPage\\UserPage.js":"13","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\ImgUpload.js":"14","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfileSettings\\ProfileSettings.js":"15","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\UserList\\UserList.js":"16","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\MessageBox\\MessageBox.js":"17","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\HomePage\\HomePage.js":"18","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ConvoPage\\ConvoPage.js":"19","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Compatibility.js":"20","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Loader\\Loader.js":"21","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Backdrop\\Backdrop.js":"22","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Signup.js":"23","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Cropper\\Cropper.js":"24","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\NavMobile\\NavMobile.js":"25","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Login.js":"26","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\AvatarImg\\AvatarImg.js":"27","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\LazyImage\\LazyImage.js":"28","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Message\\Message.js":"29","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Cropper\\ImageUtil.js":"30"},{"size":506,"mtime":1609180591396,"results":"31","hashOfConfig":"32"},{"size":3059,"mtime":1617380649895,"results":"33","hashOfConfig":"32"},{"size":6733,"mtime":1617386096490,"results":"34","hashOfConfig":"32"},{"size":452,"mtime":1614566863335,"results":"35","hashOfConfig":"32"},{"size":1464,"mtime":1615751647194,"results":"36","hashOfConfig":"32"},{"size":3668,"mtime":1615821628797,"results":"37","hashOfConfig":"32"},{"size":8492,"mtime":1617384540865,"results":"38","hashOfConfig":"32"},{"size":13565,"mtime":1615847060213,"results":"39","hashOfConfig":"32"},{"size":2790,"mtime":1615838882444,"results":"40","hashOfConfig":"32"},{"size":8591,"mtime":1615838930035,"results":"41","hashOfConfig":"32"},{"size":3751,"mtime":1617387498815,"results":"42","hashOfConfig":"32"},{"size":3860,"mtime":1615838882444,"results":"43","hashOfConfig":"32"},{"size":15317,"mtime":1617382298714,"results":"44","hashOfConfig":"32"},{"size":6085,"mtime":1615838882443,"results":"45","hashOfConfig":"32"},{"size":12074,"mtime":1617380655243,"results":"46","hashOfConfig":"32"},{"size":4036,"mtime":1617379356499,"results":"47","hashOfConfig":"32"},{"size":4819,"mtime":1615838882443,"results":"48","hashOfConfig":"32"},{"size":1121,"mtime":1617378738260,"results":"49","hashOfConfig":"32"},{"size":8335,"mtime":1615838882445,"results":"50","hashOfConfig":"32"},{"size":24133,"mtime":1615846915905,"results":"51","hashOfConfig":"32"},{"size":309,"mtime":1614566334437,"results":"52","hashOfConfig":"32"},{"size":655,"mtime":1609252600400,"results":"53","hashOfConfig":"32"},{"size":6734,"mtime":1615752561144,"results":"54","hashOfConfig":"32"},{"size":4393,"mtime":1615751451645,"results":"55","hashOfConfig":"32"},{"size":3019,"mtime":1615752747560,"results":"56","hashOfConfig":"32"},{"size":4424,"mtime":1615838930035,"results":"57","hashOfConfig":"32"},{"size":1593,"mtime":1615737087753,"results":"58","hashOfConfig":"32"},{"size":1361,"mtime":1614606888748,"results":"59","hashOfConfig":"32"},{"size":863,"mtime":1614022823199,"results":"60","hashOfConfig":"32"},{"size":1980,"mtime":1615751473810,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"fjoyu5",{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\index.js",[],["134","135"],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\Store\\reducer.js",["136","137"],"//ANY ERRORS WITH REDUX REDUCER/METHODS, CHECK ACTION/VAR NAMES FOR ANY DISCREPANCY\r\n\r\nconst initialState = {\r\n    modalType: null,\r\n    image: null,\r\n    currentUserId: null,\r\n    isMale: null,\r\n    token: null,\r\n    otherUser: null,\r\n    newMessage: []\r\n}\r\n\r\nconst reducer = (state = initialState, action)=> {\r\n    switch(action.type){\r\n        case \"USER_LOGIN\":\r\n            \r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n                currentUserId: action.userId,\r\n                currentUserName: action.userName,\r\n                isMale: action.isMale,\r\n                image: null\r\n            }\r\n        case \"LOGOUT\":\r\n            localStorage.removeItem('userId');\r\n            localStorage.removeItem('name')\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('expiryDate')\r\n            localStorage.removeItem('isMale')\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                \r\n                currentUserId: null,\r\n                currentUserName: null,\r\n                isMale: null,\r\n                otherUser: null,\r\n                modalType: null,\r\n                loaded: false,\r\n                newMessage: []\r\n            }\r\n        case \"IMG_CROP\":\r\n            return {\r\n                ...state,\r\n                image: action.fileObj,\r\n                modalType: \"IMG_CROP\"\r\n            }\r\n        case \"SET_IMG\":\r\n            return {\r\n                ...state,\r\n                image: action.fileObj,\r\n                modalType: null\r\n            }\r\n        case \"DEACTIVATE\":\r\n            return {\r\n                ...state,\r\n                modalType: \"DEACTIVATE\",\r\n                chungus: \"SET\"\r\n            }\r\n        case \"CLOSE_MODAL\":\r\n            return {\r\n                ...state,\r\n                modalType: null,\r\n                image: null,\r\n                chungus: null\r\n            }\r\n        case \"UPDATE_ISMALE\":\r\n            return {\r\n                ...state,\r\n                isMale: action.sex\r\n            }\r\n        case \"NEW_MSG\":\r\n            if(action.op === \"add\"){\r\n\r\n                const arr1 = [...state.newMessage]\r\n                const arr2 = action.convo\r\n\r\n                arr2.map((convo, index) => {\r\n                    if(arr1.includes(convo)){\r\n                        arr2.splice(index, 1)\r\n\r\n                    }\r\n                })\r\n                \r\n\r\n                const newMessageArr = arr1.concat(arr2)\r\n\r\n\r\n                return {\r\n                    ...state,\r\n                    newMessage: newMessageArr\r\n                }\r\n\r\n\r\n            } else if(action.op === \"remove\"){\r\n\r\n                const arr = [...state.newMessage]\r\n\r\n                const index = arr.indexOf(action.convo)\r\n\r\n                arr.splice(index, 1)\r\n                return {\r\n                    ...state,\r\n                    newMessage: arr\r\n                }\r\n            }\r\n            \r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\App.js",["138","139"],"import React, {Component} from 'react';\r\nimport Navigation from './Navbar/Navigation';\r\nimport Auth from './Authenticate/Auth';\r\nimport Modal from './Modal/Modal';\r\nimport Basic from './ProfInfo/Basic';\r\nimport Starter from './ProfInfo/Starter';\r\nimport Forgot from './Authenticate/Forgot';\r\nimport MatchList from './MatchList/MatchList';\r\nimport Compatibility from './ProfInfo/Compatibility';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {connect} from 'react-redux'\r\nimport openSocket from 'socket.io-client';\r\n\r\n\r\nimport './App.css';\r\nimport UserList from './UserList/UserList';\r\nimport UserPage from './UserPage/UserPage';\r\nimport UnAuth from './Authenticate/UnAuth';\r\nimport HomePage from './HomePage/HomePage';\r\nimport ProfileSettings from './ProfileSettings/ProfileSettings';\r\nimport ImgUpload from './ProfInfo/ImgUpload';\r\nimport MessageBox from './MessageBox/MessageBox';\r\nimport ConvoPage from './ConvoPage/ConvoPage';\r\nimport Reset from './Authenticate/Reset';\r\n\r\n\r\nconst socket = openSocket(\"https://dating-site-template-tna4c.ondigitalocean.app/dating-site-backend\", {\r\n  path: \"/dating-site-backend/socket.io\",\r\n  rejectUnauthorized: false\r\n})\r\n\r\nclass App extends Component {\r\n\r\n  \r\n  state = {\r\n    userSocket: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    //local component variable to check if user is logged in per localStorage\r\n    \r\n    let token = localStorage.getItem('token');\r\n    let expiryDate = localStorage.getItem('expiryDate');\r\n    if (!token || !expiryDate) {\r\n      return;\r\n    }\r\n    //check if already reached expiry, if expiry has passed, logout. If expiry has not passed and token is still valid, update expiry date to one hour in future\r\n    if(new Date(expiryDate) <= new Date()) {\r\n      this.logoutHandler();\r\n      return;\r\n    } else {\r\n      //app is remounted but token is still valid\r\n      //delete token and expiration date from local storage (but use token variable to send in request)\r\n      //make request for a new token\r\n      //receive new token and set new expiration\r\n      const userId = localStorage.getItem('userId');\r\n      const name = localStorage.getItem('name')\r\n      let isMale = localStorage.getItem('isMale')\r\n      isMale === \"true\" ? isMale = true : isMale = false\r\n \r\n      //delete token and expiration date from local storage (but keep token variable to send in request)\r\n\r\n\r\n      localStorage.removeItem('token');\r\n\r\n      fetch(process.env.REACT_APP_BACKEND + \"/tokenRefresh/\" + userId, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \r\n          Authorization: \"Bearer \" + token\r\n        }\r\n      }).then(res => {\r\n        if(res.status !==200 && res.status !== 201 ){\r\n        \r\n          throw new Error(\"Create new token failed\")\r\n        }\r\n  \r\n        return res.json()\r\n      \r\n      }).then(res => {\r\n\r\n        token = res.token\r\n\r\n        if(userId && token){\r\n          this.props.userLogin(userId, name, token, isMale)\r\n          this.fetchNewMsg(token)\r\n          localStorage.setItem('token', res.token);\r\n \r\n        let remainingMilliseconds = 60 * 60 * 1000 * 24;\r\n        const expiryDate = new Date(\r\n          new Date().getTime() + remainingMilliseconds\r\n        );\r\n        localStorage.setItem('expiryDate', expiryDate.toISOString());\r\n        \r\n        \r\n  \r\n        setTimeout(() => {\r\n          this.logoutHandler();\r\n        }, remainingMilliseconds);\r\n      }\r\n        \r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n      \r\n  }\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    \r\n  }\r\n\r\n  fetchNewMsg = (token) => {\r\n    fetch(process.env.REACT_APP_BACKEND + \"/newMessageCheck\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + token\r\n      }\r\n    }).then(res => {\r\n      if(res.status !==200 && res.status !== 201 ){\r\n      \r\n        throw new Error(\"Check new messages failed\")\r\n      }\r\n\r\n      return res.json()\r\n    \r\n    }).then(res => {\r\n      if(res.convoArr.length > 0){\r\n        this.props.newMessage(\"add\", res.convoArr)\r\n      }\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  \r\n\r\n\r\n  logoutHandler = () => {\r\n\r\n    this.props.logoutRedux();\r\n  }\r\n\r\n  updateMessages = () => {\r\n    \r\n    if(this.props.token && this.props.newMessageArray.length === 0){\r\n      this.fetchNewMsg(this.props.token)\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let renderModal = null\r\n    if(this.props.modalType){\r\n      renderModal = <Modal />\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Navigation logoutHandler={this.logoutHandler} />\r\n        {renderModal}\r\n        <div className=\"screen\" style={{paddingTop: 62}}>\r\n          <Switch>\r\n            <Route path=\"/\" exact render={(props) => (<HomePage {...props} updateMessages={this.updateMessages} />)} />\r\n            <Route path=\"/auth\" component={Auth} />\r\n            <Route path=\"/forgotPassword\" component={Forgot} />\r\n            <Route path=\"/reset/:resetToken\" component={Reset} />\r\n            <Route path=\"/profile\" render={this.props.token ? (props) => (<Basic {...props} updateMessages={this.updateMessages} />): (props) => <UnAuth {...props}/>} />\r\n            <Route path=\"/profileImgs\" component={this.props.token ? ImgUpload : UnAuth} />\r\n            <Route path=\"/compatibility\" component={this.props.token ? Compatibility : UnAuth} />\r\n            <Route path=\"/matchList\" render={this.props.token ? (props) => (<MatchList {...props} updateMessages={this.updateMessages} />): (props) => <UnAuth {...props}/>} />\r\n            <Route path=\"/userList/:isMale\" render={(props) => (<UserList {...props} updateMessages={this.updateMessages} />)} />\r\n            <Route path=\"/user/:userId\" render={(props) => (<UserPage {...props} updateMessages={this.updateMessages} />)} />\r\n            \r\n            <Route path=\"/profileSettings\" component={this.props.token ? ProfileSettings : UnAuth} />\r\n            <Route path=\"/conversations\" exact component={this.props.token ? MessageBox : UnAuth} />\r\n            <Route path=\"/conversations/:userId\" exact component={this.props.token ? ConvoPage : UnAuth} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modalType: state.modalType,\r\n    currentUserId: state.currentUserId,\r\n    token: state.token,\r\n    newMessageArray: state.newMessage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    newMessage: (op, convo) => dispatch({type: \"NEW_MSG\", op: op, convo: convo}),\r\n    logoutRedux: () => dispatch({type: \"LOGOUT\"}),\r\n    userLogin: (userId, userName, token, isMale) => dispatch({type: \"USER_LOGIN\", userId: userId, userName: userName, token: token, isMale: isMale}),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\UnAuth.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Navbar\\Navigation.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Auth.js",["140","141","142"],"import React, {Component} from  'react';\r\nimport Login from './Login';\r\nimport Signup from '../ProfInfo/Signup';\r\nimport {connect} from 'react-redux';\r\nimport Loader from '../Loader/Loader';\r\n\r\n\r\n//called upon when login tab is clicked. used to switch between login and signup methods\r\n\r\nclass Auth extends React.Component{\r\n\r\n    state = {\r\n        comp: \"login\",\r\n        authInfo: {\r\n            email: \"\",\r\n            pass: \"\",\r\n            confPass: \"\"\r\n        },\r\n        essentials: {\r\n            age: null,\r\n            location: {\r\n                town: \"\",\r\n                state: \"\"\r\n            },\r\n            bio: \"\",\r\n            isMale: null,\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.location.pathname.split(\"/\")[2] === \"redirect\"){\r\n            this.setState({error: \"You must be logged in to see that page\"})\r\n        }\r\n    }\r\n\r\n    loginSuccess = async (userId, userName, token, isMale) => {\r\n        //once backend has returned a successful login, change redux state of userId to the successful login userId, or the userId of user created at signup\r\n        //also after session/cookies created in backend, relay to here to update state for session for logged in users\r\n        try {\r\n            localStorage.setItem('userId', userId);\r\n            localStorage.setItem('token', token)\r\n            localStorage.setItem('name', userName)\r\n            localStorage.setItem('isMale', isMale === true ? \"true\" : \"false\")\r\n            let remainingMilliseconds = 60 * 60 * 1000 * 24;\r\n            const expiryDate = new Date(\r\n                new Date().getTime() + remainingMilliseconds\r\n                );\r\n                localStorage.setItem('expiryDate', expiryDate.toISOString());\r\n            this.props.userLogin(userId, userName, token, isMale)\r\n            //this.props.setMsg(messages)\r\n\r\n            this.props.history.push(this.props.location.pathname.split(\"/\")[2] === \"redirect\" ? this.props.location.pathname.split(\"/redirect\")[1] : \"\")\r\n            \r\n            \r\n        } catch (err) {\r\n            console.log(err, 'assigning user Id to redux error', userId, userName, token)\r\n        }\r\n        \r\n    }\r\n\r\n    setChildErr = err => {\r\n        if(err === \"null\"){\r\n            this.setState({error: null})\r\n            return\r\n        }\r\n        if(!this.state.error){\r\n            this.setState({error: err, loading: false})\r\n            window.scrollTo(0, 0)\r\n\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    uponSignupSubmit = async (essentials) => {\r\n\r\n        this.setState({loading: true})\r\n                \r\n        this.setState({ essentials })\r\n\r\n        if(this.state.authInfo.email.length< 5 || this.state.authInfo.pass.length < 8){\r\n            this.setState({error: \"Error with email or password. Refresh and try again.\"})\r\n            return\r\n        }\r\n\r\n        if(!this.props.image instanceof File||!this.props.image){\r\n            console.log(\"not a file\")\r\n            this.setState({error: \"Error with image selected. Try to upload a different profile picture.\"})\r\n            return\r\n        }\r\n        \r\n        try {\r\n            \r\n                if(this.state.error){\r\n                    this.setState({loading: false})\r\n                    return ;\r\n                }\r\n        \r\n        \r\n                //post request to api/users\r\n                //backend looks if already users with that email address\r\n                //if no user is found, post request and create a new user\r\n                //if user creation was a success...\r\n\r\n                const formData = new FormData();\r\n        \r\n                formData.append('email', this.state.authInfo.email)\r\n                formData.append('password', this.state.authInfo.pass)\r\n                formData.append('name', this.state.essentials.name)\r\n                formData.append('age', this.state.essentials.age)\r\n                formData.append('locTown', this.state.essentials.location.town)\r\n                formData.append('locState', this.state.essentials.location.state)\r\n                formData.append('isMale', this.state.essentials.isMale)\r\n                formData.append('avatarImg', this.props.image)\r\n\r\n                if(this.state.essentials.bio){\r\n                    formData.append('bio', this.state.essentials.bio)\r\n                }\r\n                fetch(process.env.REACT_APP_BACKEND + '/users', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                      \r\n                    },\r\n                    body: formData\r\n                  }).then(res => {\r\n                      \r\n                        if(res.status !== 200 && res.status !== 201){\r\n                            this.setState({loading: false})\r\n                            if(res.status === 422){\r\n                                throw new Error(\"Email is already in use.\")\r\n                            } else if(res.status === 418){\r\n                                throw new Error(\"Issues uploading profile picture. Select the picture and submit again.\")\r\n                            } else if(res.status === 500){\r\n                                throw new Error(\"There seems to be an issue with our server. Refresh and try again.\")\r\n                            } else {\r\n                                throw new Error(\"There was a registration error. Try again later.\")\r\n                            }\r\n                        }\r\n\r\n                        this.setState({message: \"Account created! Redirecting to profile editing\", loading: false})\r\n\r\n                        \r\n                        return res.json();\r\n                        \r\n                  }).then(res => {\r\n                      this.props.nullImg()\r\n        \r\n                        this.loginSuccess(res.userId, res.userName, res.token, res.isMale, []);\r\n                  }).then(res => {\r\n                        this.props.history.push('/profile')\r\n\r\n                  }).catch(err => {\r\n                        this.setState({error: err.message, loading: false})\r\n                        window.scrollTo(0, 0)\r\n\r\n                })\r\n        \r\n        } catch (err) {\r\n            console.log(err)\r\n            this.setState({error: err, loading: false})\r\n            window.scrollTo(0, 0)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    switchComp = (e) => {\r\n        e.preventDefault()\r\n        {this.state.comp === \"login\" ? this.setState({...this.state, comp: \"signup\"}) : this.setState({...this.state, comp: \"login\"})}\r\n    }\r\n\r\n    updateInput = (input) => {\r\n        this.setState({...this.state, authInfo: {...this.state.authInfo, [input.target.name]: input.target.value}});\r\n    }\r\n\r\n    render() {\r\n        let compRender\r\n\r\n        {this.state.comp === \"login\" ? \r\n            compRender = <Login \r\n                setErr={this.setChildErr.bind()} \r\n                error={this.state.error} \r\n                loginSuccess={(userId, userName, token, isMale) => this.loginSuccess(userId, userName, token, isMale)} \r\n                switchComp={this.switchComp} \r\n                pass={this.state.authInfo.pass} \r\n                history={this.props.history} \r\n                email={this.state.authInfo.email} \r\n                UPDATE={this.updateInput.bind()} /> : \r\n            compRender = <Signup \r\n                setErr={this.setChildErr.bind()} \r\n                error={this.state.error} \r\n                switchComp={this.switchComp} \r\n                uponSignupSubmit={this.uponSignupSubmit.bind()} \r\n                history={this.props.history} \r\n                pass={this.state.authInfo.pass} \r\n                confPass={this.state.authInfo.confPass}\r\n                email={this.state.authInfo.email} \r\n                UPDATE={this.updateInput.bind()} />}\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h3 style={{color: \"rgb(110, 211, 207)\"}}>{this.state.error || this.state.message}</h3>\r\n\r\n                {this.state.loading === true ? <Loader /> : null}\r\n\r\n                {compRender}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        image: state.image\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        userLogin: (userId, userName, token, isMale) => dispatch({type: \"USER_LOGIN\", userId: userId, userName: userName, token: token, isMale: isMale}),\r\n        nullImg: () => dispatch({type: \"SET_IMG\", fileObj: null})\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Basic.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Forgot.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Starter.js",["143"],"//Prof pic, bio entry. Not queryable but required info\r\n\r\nimport React from 'react';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\nimport {connect} from 'react-redux'\r\nimport \"./Signup.css\";\r\n\r\n//pass on everything as props from signup on auth, dont submit anything until user is finished with this page. after starter comp is filled out, then send post user request.\r\n\r\nclass Starter extends React.Component {\r\n    \r\n    state = {\r\n        geocode: \"\",\r\n        info: {\r\n            age: 21,\r\n            location: {\r\n                town: \"\",\r\n                state: \"\"\r\n            },\r\n            bio: \"\"\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.hasOwnProperty(\"info\")){\r\n            this.setState({info: this.props.info, geocode: this.props.info.location.town + \", \" + this.props.info.location.state})\r\n        }\r\n        // if(true){\r\n        //     //this.props.editing is true\r\n        //     this.setState({editing: true})\r\n        //     console.log(this.props.currentUserId)\r\n        //     // while(this.props.currentUserId === null){\r\n        //     //     setTimeout(console.log(this.props.currentUserId), 1000)\r\n        //     // }\r\n        //     fetch(process.env.REACT_APP_BACKEND + \"/user/\" + this.props.currentUserId + \"/starter\", {\r\n        //         //redux props not yet defined in component did mount, but do in render. Maybe pass it on as a param from router\r\n        //         headers: {\r\n        //             Authorization: \"Bearer \" + this.props.token\r\n        //         }\r\n        //     }).then( res => {\r\n        //         if(res.status !== 200 && res.status !== 201){\r\n        //             if(res.status === 500){\r\n        //                 throw new Error(\"Issue fetching Profile data. Try again.\")\r\n        //             } else {\r\n        //                 throw new Error(\"Issue fetching Profile data. Try again.\")\r\n        //             }\r\n        //         }\r\n                \r\n        //         return res.json();\r\n        //     }).then(resData => {\r\n        //         this.setState({info: {age: resData.age, bio: resData.bio, location: {town: resData.town, state: resData.state}}})\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    validInputs = () => {\r\n        if(this.state.info.age < 18 || this.state.info.age > 100){\r\n            this.setState({error: \"Your age should be between 18 and 100\"})\r\n        }\r\n        if(this.state.info.location.town.length < 2){\r\n            this.setState({error: \"Invalid Location, please try again\"})\r\n        }\r\n        if(this.state.info.location.state.length!== 2){\r\n            this.setState({error: \"Invalid Location, please try again\"})\r\n        }\r\n\r\n    }\r\n\r\n    changeValue = (input) => {\r\n        this.setState({info: {...this.state.info, [input.target.name]: input.target.value}});\r\n    }\r\n\r\n    setLocValue = (location) => {\r\n        this.setState({info: {...this.state.info, location: {town: location.split(\", \")[0], state: location.split(\", \")[1]}}})\r\n    }\r\n\r\n\r\n    handleSelect = (loc) => {\r\n        \r\n        this.setLocValue(loc)\r\n        this.setState({geocode: loc})\r\n        \r\n    };\r\n\r\n    changePlacesSearch = geocode => {\r\n        this.setState({ geocode })\r\n    }\r\n\r\n    continue = async() => {\r\n        this.setState({error: null})\r\n        if(this.props.edit === true){\r\n            await this.validInputs()\r\n            if(!this.state.error){\r\n                this.starterEditSubmit()\r\n                \r\n            }\r\n            return\r\n        }\r\n        this.props.setErr(\"null\")\r\n        await this.validInputs()\r\n        if(!this.state.error){\r\n            \r\n            this.props.uponSignupSubmit(this.state.info.age, this.state.info.location, this.state.info.bio)\r\n        } else if(this.state.error && !this.props.error){\r\n            this.props.setErr(this.state.error)\r\n        }\r\n        \r\n    }\r\n\r\n    starterEditSubmit = () => {\r\n        const formData = new FormData()\r\n        formData.append('age', this.state.info.age)\r\n        formData.append('locTown', this.state.info.location.town)\r\n        formData.append('locState', this.state.info.location.state)\r\n        if(this.state.info.bio){\r\n            formData.append('bio', this.state.info.bio)\r\n        }\r\n        fetch(process.env.REACT_APP_BACKEND + '/user/starter', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                      Authorization: \"Bearer \" + this.props.token\r\n                    },\r\n                    body: formData\r\n                  }).then(res => {\r\n                        if(res.status !== 200 && res.status !== 201){\r\n                            if(res.status === 422){\r\n                                throw new Error(\"problem\")\r\n                            } else if(res.status === 401){\r\n                                this.props.logoutRedux()\r\n                                window.location.replace(\"/auth\")\r\n                            } else {\r\n                                throw new Error(\"There was a registration error. Try again later.\")\r\n                            }\r\n                        }\r\n                        \r\n                        return res.json();\r\n                        \r\n                  }).then(resData => {\r\n                        this.props.history.push('/profileSettings')\r\n        \r\n                        this.setState({message: null})\r\n                  }).catch(err => {\r\n                        this.setState({error: err.message})\r\n                })\r\n    }\r\n\r\n    render() {\r\n        let searchOptions = {\r\n            types: ['(regions)'],\r\n            componentRestrictions: {country: 'us'}\r\n            \r\n        }\r\n        return (\r\n            <div className=\"Auth authForm\" style={{marginTop: \"30px\"}}>\r\n                <textarea name=\"bio\" onChange={this.changeValue.bind()} value={this.state.info.bio} placeholder=\"Tell us about yourself\"/>\r\n                \r\n                <PlacesAutocomplete\r\n                    value={this.state.geocode}\r\n                    onChange={this.changePlacesSearch}\r\n                    onSelect={this.handleSelect}\r\n                    searchOptions={searchOptions}>\r\n\r\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                    <React.Fragment>\r\n                        <input\r\n                        {...getInputProps({\r\n                            placeholder: 'Search Places ...',\r\n                            className: 'location-search-input',\r\n                        })}\r\n                        />\r\n                        <div style={{textAlign: \"left\"}} className=\"autocomplete-dropdown-container\">\r\n                        {loading && <div>Loading...</div>}\r\n                        {suggestions.map(suggestion => {\r\n                            if(suggestion.types.includes(\"locality\") === false && suggestion.types.includes(\"neighborhood\") === false){\r\n                                return\r\n                            }\r\n                            const className = suggestion.active\r\n                            ? 'suggestion-item--active'\r\n                            : 'suggestion-item';\r\n                            // inline style for demonstration purpose\r\n                            const style = suggestion.active\r\n                            ? { backgroundColor: '#fafafa', cursor: 'pointer', marginLeft: 0 }\r\n                            : { backgroundColor: '#ffffff', cursor: 'pointer', marginLeft: 0 };\r\n                            return (\r\n                            <div\r\n                                {...getSuggestionItemProps(suggestion, {\r\n                                className,\r\n                                style,\r\n                                })}\r\n                            >\r\n                                <span>{suggestion.description}</span>\r\n                            </div>\r\n                            );\r\n                        })}\r\n                        </div>\r\n                    </React.Fragment>\r\n                    )}\r\n                </PlacesAutocomplete>\r\n                \r\n\r\n                <input name=\"age\" onChange={this.changeValue.bind()} type=\"number\" min=\"18\" max=\"100\" placeholder=\"Age?\" value={this.state.info.age} />\r\n\r\n                \r\n                <button onClick={this.continue}>Continue</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Starter);","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\MatchList\\MatchList.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Reset.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\UserPage\\UserPage.js",["144","145","146","147","148","149"],"import React from 'react';\r\nimport  { NavLink, Redirect } from 'react-router-dom'\r\nimport ImgUpload from '../ProfInfo/ImgUpload'\r\n\r\n\r\nimport './UserPage.css'\r\nimport {connect} from 'react-redux'\r\nimport Loader from '../Loader/Loader';\r\n\r\nclass UserPage extends React.Component {\r\n    \r\n    state = {\r\n        user: null,\r\n        editing: false,\r\n        uploadingImgs: false\r\n    }\r\n    //fetch user by userId in params\r\n    //fill out userInfo with info about user by ID\r\n    //pass userId in userPage prop to <MainFeed ... />\r\n    //in MainFeed comp, check for userPage prop. If userPage has a value (value would be userId passed from here), fetch all posts made by user with this id\r\n    \r\n    editUser = () => {\r\n        this.setState({editing: true});\r\n    }\r\n\r\n    bioChange = (e) => {\r\n        this.setState({user: {...this.state.user, bio: e.target.value}});\r\n    }\r\n\r\n    updateUserImgs = (imgs) => {\r\n        this.setState({user: {...this.state.user, profileImgs: imgs}})\r\n    }\r\n\r\n    submitEdit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        this.setState({editing: false })\r\n        const formData = new FormData();\r\n        formData.append('bio', this.state.user.bio);\r\n        fetch(process.env.REACT_APP_BACKEND + '/user/bio/' + this.props.match.params.userId, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    authorization: 'Bearer ' + this.props.token\r\n                },\r\n                body: formData\r\n            }).then(res => {\r\n                if(res.status !==200 && res.status !== 201 ){\r\n                    if(res.status === 401){\r\n                        this.props.logoutRedux()\r\n                        window.location.replace(\"/auth\")\r\n                    } else {\r\n                        throw new Error(\"Editing user page failed\")\r\n                    }\r\n                }\r\n\r\n                return res.json();\r\n\r\n            }).catch(err => {\r\n                console.log(err)\r\n                this.setState({error: err.message})\r\n\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({userId: this.props.match.params.userId, loading: true}, () => this.getUserPage())   \r\n        this.props.updateMessages()\r\n     \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.match.params.userId !== this.state.userId){\r\n            this.setState({userId: this.props.match.params.userId, loading: true}, () => this.getUserPage())\r\n        }\r\n    }\r\n\r\n    getUserPage = () => {\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/page/\" + this.state.userId, {\r\n            method: \"GET\"\r\n        }).then(response => {\r\n            if(response.status !== 200 && response.status !== 201){\r\n                if(response.status === 404){\r\n                    throw new Error(\"404 User not found.\");\r\n                } else {\r\n                    throw new Error(\"Fetching this users page has failed.\");\r\n                }\r\n            }\r\n            return response.json()\r\n        }).then(resData => {\r\n            this.setState({user: resData.user, loading: false})\r\n        }).catch(err => {\r\n            console.log(err.message);\r\n            this.setState({error: err.message, loading: false});\r\n        })\r\n    }\r\n\r\n    sendMessage = () => {\r\n        this.props.otherUser(this.state.user.name, this.state.user._id, this.state.user.avatarImg)\r\n    }\r\n\r\n    render () {\r\n        //loop through posts, map them into Post components to render\r\n        \r\n        let loaded = null\r\n        let bio;\r\n\r\n        if(this.state.loading === true){\r\n            return <Loader />\r\n        }\r\n        \r\n\r\n        if(this.state.user){\r\n            if(this.props.match.params.userId === this.props.currentUserId && this.props.token){\r\n                this.state.user.bio ? bio = <p onClick={this.editUser}>{this.state.user.bio}</p> : bio =<p onClick={this.editUser}>Click here to edit your bio</p>\r\n            } else {\r\n                this.state.user.bio ? bio = <p>{this.state.user.bio}</p> : bio = <p>This user has no bio</p>\r\n            }\r\n            if(this.state.editing){\r\n                bio = <form onSubmit={this.submitEdit.bind()} >\r\n                    <textarea className=\"big-input-box\" type=\"textarea\" onChange={this.bioChange.bind()} placeholder=\"Write your new bio here\" value={this.state.user.bio} />\r\n                    <button style={{marginBottom: 15}} type=\"submit\">Submit edit</button>\r\n                </form>\r\n            }\r\n\r\n\r\n            let values = null\r\n\r\n            // let modTradBar = this.state.user.values.modTrad.map(val => {\r\n            //     return <div style={{width: \"12px\", backgroundColor: \"pink\", margin: \"3px\"}}/>\r\n            // })\r\n\r\n            let modTradBar = []\r\n\r\n            for(let i = 0; i< 15; ++i){\r\n\r\n                if(i < this.state.user.values.modTrad){\r\n                    modTradBar.push(<div style={{width: \"10px\", backgroundColor: \"lime\", flex: 1}}/>)\r\n                } else {\r\n                    modTradBar.push(<div style={{width: \"10px\", opacity: 0, margin: \"3px\", flex: 1}}/>)\r\n                }\r\n            }\r\n\r\n            let homeAdvBar = []\r\n\r\n            for(let i = 0; i< 15; ++i){\r\n\r\n                if(i < this.state.user.values.homeAdv){\r\n                    homeAdvBar.push(<div style={{width: \"10px\", backgroundColor: \"lime\", flex: 1}}/>)\r\n                } else {\r\n                    homeAdvBar.push(<div style={{width: \"10px\", opacity: 0, margin: \"3px\", flex: 1}}/>)\r\n                }\r\n            }\r\n\r\n            let intrExtrBar = []\r\n\r\n            for(let i = 0; i< 15; ++i){\r\n\r\n                if(i < this.state.user.values.intrExtr){\r\n                    intrExtrBar.push(<div style={{width: \"10px\", backgroundColor: \"lime\", flex: 1}}/>)\r\n                } else {\r\n                    intrExtrBar.push(<div style={{width: \"10px\", opacity: 0, margin: \"3px\", flex: 1}}/>)\r\n                }\r\n            }\r\n\r\n            let indiffActiveBar = []\r\n\r\n            for(let i = 0; i< 15; ++i){\r\n\r\n                if(i < this.state.user.values.indiffActive){\r\n                    indiffActiveBar.push(<div style={{width: \"10px\", backgroundColor: \"lime\", flex: 1}}/>)\r\n                } else {\r\n                    indiffActiveBar.push(<div style={{width: \"10px\", opacity: 0, margin: \"3px\", flex: 1}}/>)\r\n                }\r\n            }\r\n\r\n            let athReligBar = []\r\n\r\n            for(let i = 0; i< 15; ++i){\r\n\r\n                if(i < this.state.user.values.athRelig){\r\n                    athReligBar.push(<div style={{width: \"10px\", backgroundColor: \"lime\", flex: 1}}/>)\r\n                } else {\r\n                    athReligBar.push(<div style={{width: \"10px\", opacity: 0, margin: \"3px\", flex: 1}}/>)\r\n                }\r\n            }\r\n\r\n            //let homeAdvBar = this.state.user.values\r\n\r\n\r\n            if(this.state.user.values.modTrad >= 0 && this.state.user.values.homeAdv >= 0 && this.state.user.values.intrExtr >= 0 && this.state.user.values.indiffActive >= 0 && this.state.user.values.athRelig >= 0){\r\n                values = <div >\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", margin: \"6px\"}}>\r\n                        <h5 style={{flex: 1, textAlign: \"left\", margin: \"auto\"}} className=\"half valLabels\">Modern - Trad </h5><div className=\"half valBarContainer\">{modTradBar}</div>\r\n                    </div>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", margin: \"6px\"}}>\r\n                        <h5 style={{flex: 1, textAlign: \"left\", margin: \"auto\"}} className=\"half valLabels\" >Home - Adventure </h5><div className=\"half valBarContainer\">{homeAdvBar}</div>\r\n                    </div>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", margin: \"6px\"}}>\r\n                        <h5 style={{flex: 1, textAlign: \"left\", margin: \"auto\"}} className=\"half valLabels\" >Introvert - Extrovert </h5><div className=\"half valBarContainer\">{intrExtrBar}</div>\r\n\r\n                    </div>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", margin: \"6px\"}}>\r\n                        <h5 style={{flex: 1, textAlign: \"left\", margin: \"auto\"}} className=\"half valLabels\" >Independent - Community </h5><div className=\"half valBarContainer\">{indiffActiveBar}</div>\r\n\r\n                    </div>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", margin: \"6px\"}}>\r\n                        <h5  style={{flex: 1, textAlign: \"left\", margin: \"auto\"}} className=\"half valLabels\">Atheist - Religious </h5><div  className=\"half valBarContainer\">{athReligBar}</div>\r\n\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n\r\n\r\n            let messageButton = null\r\n\r\n            if(!this.props.currentUserId && !this.props.token){\r\n                messageButton = <NavLink to={\"/auth\"} ><button type=\"none\" style={{marginBottom: \"10px\"}} >Login to talk</button></NavLink>\r\n            } else if(this.props.currentUserId !== this.state.user._id){\r\n                messageButton = <NavLink to={\"/conversations/\" + this.state.user._id} ><button type=\"none\" style={{marginBottom: \"10px\"}} onClick={this.sendMessage} >Send message</button></NavLink>\r\n            }\r\n\r\n\r\n            loaded = (\r\n                <div className=\"userPage container-fluid\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"userInfo col-sm-4\">\r\n                            \r\n                            <img className=\"img-fluid\" style={{marginTop: \"20px\"}} src={this.state.user.avatarImg} alt=\"\" />\r\n                            \r\n                            <h1>{this.state.user.name}</h1>\r\n                            <h2>{this.state.user.age} y/o</h2>\r\n                            {bio}\r\n                            <h3>{this.state.user.location.town}, {this.state.user.location.state}</h3>\r\n\r\n                            {messageButton}\r\n                            \r\n                            {/* <button style={{marginBottom: \"10px\"}} >Send Message</button>  */}\r\n                        </div>  \r\n                        <div className=\"userBlock col-sm-7\">\r\n                            {this.state.user.profileImgs.length < 5 && this.props.match.params.userId === this.props.currentUserId && this.props.token && this.state.uploadingImgs === false ? <div onClick={() => this.setState({uploadingImgs: true})}><h4 style={{marginTop: \"20px\", marginBottom: \"10px\", cursor: \"pointer\"}} className=\"defButton\">Click here to upload more profile images</h4></div> : null}\r\n                            {this.state.uploadingImgs === true && this.props.match.params.userId === this.props.currentUserId && this.props.token ? <React.Fragment><button type=\"none\" style={{marginTop: \"20px\"}} className=\"defButton\" onClick={() => this.setState({uploadingImgs: false})}>Close Image Upload</button><ImgUpload updateUserImgs={(imgs) => this.updateUserImgs(imgs)} profileImgs={this.state.user.profileImgs} /></React.Fragment> : null}\r\n                            {this.state.user.profileImgs.length > 0 && this.state.uploadingImgs === false ? <img src={this.state.user.profileImgs[0]} /> : null}\r\n                            <ul>\r\n                                {this.state.user.basicInfo.religiousDenom.length > 0 ? <li>Religious Denomination: {this.state.user.basicInfo.religiousDenom} </li>:null}\r\n                                {this.state.user.basicInfo.prevMarried !== null ? this.state.user.basicInfo.prevMarried === true ? <li>Previously married: Yes</li>: <li>Previously married: No</li> : null}\r\n                                {this.state.user.basicInfo.hasChildren !== null ? this.state.user.basicInfo.hasChildren === true ? <li>Has children: Yes</li>: <li>Has children: No</li> : null}\r\n                                {this.state.user.basicInfo.drinks.length > 0 ? <li>Drinks: {this.state.user.basicInfo.drinks}</li>:null}\r\n                                {this.state.user.basicInfo.smokes !== null ? this.state.user.basicInfo.smokes === true ? <li>Smoker: Yes</li>: <li>Smoker: No</li> : null}\r\n                                {this.state.user.basicInfo.height.length > 0 ? <li>Height: {this.state.user.basicInfo.height}</li> :null}\r\n                                {this.state.user.basicInfo.occupation.length > 0 ? <li>Occupation: {this.state.user.basicInfo.occupation}</li> :null}\r\n                                {this.state.user.basicInfo.relType.length > 0 ? <li>Relationship Preference: {this.state.user.basicInfo.relType}</li> :null}\r\n                            \r\n                            </ul>\r\n                            {this.state.user.profileImgs.length > 1 && this.state.uploadingImgs === false ? <img src={this.state.user.profileImgs[1]} /> : null}\r\n                            \r\n                            <ul>\r\n                                {this.state.user.displayInfo.hobbies.length > 0 ? <li>Hobbies: {this.state.user.displayInfo.hobbies.join(\", \")}</li> :null}\r\n                                {this.state.user.displayInfo.music.length > 0 ? <li>Music: {this.state.user.displayInfo.music.join(\", \")}</li> :null}\r\n                                {this.state.user.displayInfo.showsMovies.length > 0 ? <li>Shows and Movies: {this.state.user.displayInfo.showsMovies.join(\", \")}</li> :null}\r\n                                {this.state.user.displayInfo.interests.length > 0 ? <li>Interests: {this.state.user.displayInfo.interests.join(\", \")}</li> :null}\r\n\r\n\r\n                            </ul>\r\n\r\n                            {this.state.user.displayInfo.areYouReligiousQ.length > 0 ? <h5>How religious are you? {this.state.user.displayInfo.areYouReligiousQ}</h5> :null}\r\n                            {this.state.user.displayInfo.describeMatch.length > 0 ? <h5>How would you describe your ideal match? {this.state.user.displayInfo.describeMatch}</h5> :null}\r\n                            {this.state.user.displayInfo.aspirations.length > 0 ? <h5>What are some of your dreams and aspirations? {this.state.user.displayInfo.aspirations}</h5> :null}\r\n\r\n\r\n                            {this.state.user.profileImgs.length > 2 && this.state.uploadingImgs === false ? <img src={this.state.user.profileImgs[2]} /> : null}\r\n                            \r\n                            {values}\r\n                            \r\n                            {this.state.user.profileImgs.length > 3 && this.state.uploadingImgs === false ? <img src={this.state.user.profileImgs[3]} /> : null}\r\n                            {this.state.user.profileImgs.length > 4 && this.state.uploadingImgs === false ? <img src={this.state.user.profileImgs[4]} /> : null}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n            \r\n        }\r\n        if(this.state.error){\r\n            loaded = <h2>{this.state.error}</h2>;\r\n        }\r\n        return ( <div>{loaded}</div> )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token,\r\n        otherUserState: state.otherUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        otherUser: (name, id, avatarImg) => dispatch({type: \"OTHER_USER\", name: name, id: id, avatarImg: avatarImg})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\ImgUpload.js",["150"],"import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport \"./ImgUpload.css\"\r\n\r\n\r\nclass ImgUpload extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputOpenFileRef = React.createRef()\r\n        this.state = {\r\n            image: null,\r\n            uploaded: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.hasOwnProperty(\"profileImgs\")){\r\n            this.setState({uploaded: this.props.profileImgs})\r\n        } else {\r\n            fetch(process.env.REACT_APP_BACKEND + \"/user/fetchImgs\", {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + this.props.token\r\n                }\r\n            }).then(res => {\r\n                return res.json()\r\n            }).then(res => {\r\n                this.setState({uploaded: res.images})\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    changeImage = (input) => {\r\n        \r\n        this.setState({image: input.target.value})\r\n\r\n        if(!input.target.files[0]){\r\n            return\r\n        }\r\n\r\n        const file = input.target.files[0]\r\n\r\n        this.props.imgCrop(file)\r\n\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        if(this.props.hasOwnProperty(\"updateUserImgs\")){\r\n            this.props.updateUserImgs(this.state.uploaded)\r\n        }\r\n    }\r\n\r\n    submitImg = () => {\r\n        this.setState({error: null, message: null})\r\n        if(this.state.uploaded.length === 5){\r\n            this.setState({error: \"You have reached the maximum of 5 images\"})\r\n            return\r\n        }\r\n        if(!this.props.image instanceof File||!this.props.image){\r\n            this.setState({error: \"Error with image selected. Try to upload a different profile picture.\"})\r\n            return\r\n        }\r\n        const formData = new FormData();\r\n\r\n        formData.append('avatarImg', this.props.image)\r\n\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/profileImg\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            },\r\n            body: formData\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n\r\n            this.setState({message: \"Profile picture updated successfully\"})\r\n            return res.json()\r\n        }).then(res => {\r\n            this.props.nullImg()\r\n            if(this.state.uploaded.length < 5){\r\n                this.setState({ uploaded: [...this.state.uploaded, res.imgUrl] })\r\n            }\r\n        }).catch( err => {\r\n            this.setState({error: err.message})\r\n        })\r\n\r\n    }\r\n\r\n\r\n    deleteImg = (idx) => {\r\n        this.deleteConfirm(null)\r\n        this.setState({error: null, message: null})\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/deleteImage/\" + idx, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            }\r\n        }).then( res => {\r\n            if(res.status === 200 || res.status === 201){\r\n            } else if(res.status === 401){\r\n                this.props.logoutRedux()\r\n                window.location.replace(\"/auth\")\r\n            }\r\n            return res.json()\r\n        }).then(res => {\r\n            const picArr = [...this.state.uploaded]\r\n            picArr.splice(idx, 1)\r\n            this.setState({uploaded: picArr, message: res.message, error: null})\r\n        }).catch(err => {\r\n            console.log(err)\r\n\r\n            this.setState({error: \"Failed to delete image\"})\r\n        })\r\n    }\r\n\r\n    openFileInput = () => {\r\n        this.inputOpenFileRef.current.value = \"\"\r\n        window.scrollTo(0, 0)\r\n\r\n        this.inputOpenFileRef.current.click()\r\n        this.setState({message: null, error: null})\r\n    }\r\n\r\n    deleteConfirm = (idx) => {\r\n        this.setState({imgToDelete: idx})\r\n    }\r\n    \r\n    render() {\r\n        const imgs = this.state.uploaded.map((img, idx) => {\r\n\r\n            if(this.state.imgToDelete === idx){\r\n                return <div className=\"profImgUploaded\" ><button className=\"defButton\" type=\"none\" onClick={() => this.deleteImg(idx)}>Delete</button><button className=\"defButton\" type=\"none\" onClick={() => this.deleteConfirm(null)}>Cancel</button></div>\r\n            }\r\n            \r\n            return <img className=\"profImgUploaded\" key={idx} src={img} onClick={() => this.deleteConfirm(idx)} />\r\n        })\r\n        return (\r\n            <div style={{border: \"rgb(45, 45, 64) 2px solid\", margin: \"5px 0\", padding: \"5px\"}}>\r\n                <h3>Upload up to 5 images to your profile</h3>\r\n                {this.state.message ? <h4>{this.state.message}</h4> : null}\r\n                {this.state.error ? <h4>{this.state.error}</h4> : null}\r\n\r\n                <div>\r\n                    <label class=\"defButton\" onClick={this.openFileInput} for=\"image\">{this.props.image ? \"Image selected!\" : \"Select an image\" }<input ref={this.inputOpenFileRef} type=\"file\" name=\"image\" accept=\".jpg, .jpeg, .png\" onChange={this.changeImage.bind()}/></label>\r\n                    {this.props.image ? <button class=\"defButton\" type=\"none\" onClick={this.submitImg}>Upload</button> : null}\r\n\r\n                </div>\r\n                <div className=\"imgContainer\">\r\n                    {imgs}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token,\r\n        image: state.image\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        imgCrop: (fileObj) => dispatch({type: \"IMG_CROP\", fileObj: fileObj}),\r\n        nullImg: () => dispatch({type: \"SET_IMG\", fileObj: null})\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImgUpload)","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfileSettings\\ProfileSettings.js",["151","152","153","154","155"],"import React from 'react'\r\nimport Starter from '../ProfInfo/Starter'\r\nimport {connect} from 'react-redux'\r\nimport Basic from '../ProfInfo/Basic'\r\nimport ImgUpload from '../ProfInfo/ImgUpload'\r\nimport Modal from '../Modal/Modal'\r\nimport AvatarImg from '../AvatarImg/AvatarImg'\r\n\r\nclass ProfileSettings extends React.Component {\r\n\r\n    state = {\r\n        compToRender: null,\r\n        error: null,\r\n        message: null,\r\n        loaded: false,\r\n        image: null,\r\n        inputs: {\r\n            name: null,\r\n            email: null,\r\n            oldPassword: \"\",\r\n            newPassword: \"\",\r\n        }\r\n    }\r\n\r\n    compToRender = (comp) => {\r\n        this.setState({compToRender: comp})\r\n    }\r\n\r\n    \r\n    changeImage = (input) => {\r\n        \r\n        this.setState({image: input.target.value})\r\n\r\n        if(!input.target.files[0]){\r\n            return\r\n        }\r\n\r\n        const file = input.target.files[0]\r\n\r\n        this.props.imgCrop(file)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.hasOwnProperty(\"token\") && this.props.hasOwnProperty(\"currentUserId\") && this.state.loaded === false){\r\n            this.props.updateMessages()\r\n\r\n            fetch(process.env.REACT_APP_BACKEND + \"/userData\", {\r\n                //redux props not yet defined in component did mount, but do in render. Maybe pass it on as a param from router\r\n                headers: {\r\n                    Authorization: \"Bearer \" + this.props.token\r\n                }\r\n            }).then( res => {\r\n                if(res.status !== 200 && res.status !== 201){\r\n                    if(res.status === 500){\r\n                        throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                    } else if(res.status === 401){\r\n                        this.props.logoutRedux()\r\n                        window.location.replace(\"/auth\")\r\n                    } else {\r\n                        throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                    }\r\n                }\r\n                \r\n                return res.json();\r\n            }).then(resData => {\r\n                this.setState({loaded: true, user: resData.user, inputs: {name: resData.user.name, email: resData.user.email}})\r\n                if(resData.convoArr.length > 0){\r\n                    this.props.newMessage(\"add\", resData.convoArr)\r\n                  }\r\n            }).catch(err => {\r\n                console.log(err)\r\n\r\n                this.setState({loaded: true, error: err.message})\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    handleAuthSubmit = () => {\r\n        const name = this.state.inputs.name\r\n        const email = this.state.inputs.email\r\n        const newPassword = this.state.inputs.newPassword\r\n        const oldPassword = this.state.inputs.oldPassword\r\n        const formData = new FormData()\r\n\r\n        this.setState({error: null})\r\n\r\n\r\n        if(this.state.inputs.hasOwnProperty(\"oldPassword\") && this.state.inputs.hasOwnProperty(\"newPassword\")){\r\n            if(newPassword.length < 8 && newPassword.length !== 0 || newPassword.length > 30){\r\n                this.setState({error: \"Your new password must be between 8 and 30 characters. If you wish to keep your same password, leave both password bars empty. \"})\r\n                return\r\n            } else if(oldPassword.length < 8 && oldPassword.length !== 0 || oldPassword.length > 30){\r\n                this.setState({error: \"Enter your old password to change it to a new one. If you wish to keep your same password, leave both password bars empty. \"})\r\n                return\r\n            }\r\n            \r\n            if(newPassword.length >= 8 && newPassword.length <= 30 && oldPassword.length >= 8 && oldPassword.length <= 30){\r\n                formData.append(\"oldPassword\", oldPassword)\r\n                formData.append(\"newPassword\", newPassword)\r\n            }    \r\n        }\r\n        \r\n\r\n        if(email !== this.state.user.email && email !== \"\"){\r\n            formData.append(\"email\", email)\r\n        }\r\n\r\n        if(name !== this.state.user.name && name !== \"\"){\r\n            formData.append(\"name\", name)\r\n        }\r\n\r\n        \r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/updateAuth\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            },\r\n            body: formData\r\n        }).then(res => {\r\n            \r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else if(res.status === 401){\r\n                    this.props.logoutRedux()\r\n                    window.location.replace(\"/auth\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n                \r\n            return res.json();\r\n        }).then(resData => {\r\n            if(resData.updateList.length>=1){\r\n                const str = resData.updateList.join(\", \")\r\n\r\n                this.setState({message: \"The following updates were made: \" + str})\r\n            }\r\n        }).catch(err => {\r\n            console.log(err)\r\n            this.setState({error: err.message})\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    \r\n    updateInput = (input) => {\r\n        this.setState({inputs: {...this.state.inputs, [input.target.name]: input.target.value}});\r\n    }\r\n\r\n    submitImg = () => {\r\n        this.setState({error: null})\r\n        if(!this.props.image instanceof File||!this.props.image){\r\n            console.log(\"not a file\")\r\n            this.setState({error: \"Error with image selected. Try to upload a different profile picture.\"})\r\n            return\r\n        }\r\n        const formData = new FormData();\r\n\r\n        formData.append('avatarImg', this.props.image)\r\n\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/avatarImg\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            },\r\n            body: formData\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else if(res.status === 401){\r\n                    this.props.logoutRedux()\r\n                    window.location.replace(\"/auth\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n\r\n            this.props.nullImg()\r\n\r\n            this.setState({message: \"Profile picture updated successfully\"})\r\n        }).catch( err => {\r\n            this.setState({error: err.message})\r\n        })\r\n\r\n    }\r\n\r\n    deleteAcct = () => {\r\n        fetch(process.env.REACT_APP_BACKEND + \"/deleteUser\", {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            }\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n                \r\n            return res.json();\r\n        }).then(res => {\r\n            this.setState({message: res.message})\r\n\r\n            \r\n            this.props.logoutRedux()\r\n                \r\n            \r\n        }).then( res => {\r\n            setTimeout(() => {\r\n                window.location.replace(\"/\")\r\n            }, 5000)\r\n        }).catch(err => {\r\n            this.setState({message: err.message})\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let compToRender = null\r\n\r\n        if(this.state.compToRender === \"starter\"){\r\n            const info = {\r\n                bio: this.state.user.bio,\r\n                age: this.state.user.age,\r\n                location: {\r\n                    town: this.state.user.location.town,\r\n                    state: this.state.user.location.state\r\n                }\r\n            }\r\n            compToRender = <Starter edit={true} info={info} />\r\n        } else if(this.state.compToRender === \"basic\"){\r\n            const displayInfo = this.state.user.displayInfo\r\n            const basicInfo = this.state.user.basicInfo\r\n\r\n\r\n            compToRender = <Basic displayInfo={displayInfo} basicInfo={basicInfo} edit={true} />\r\n        } else if(this.state.compToRender === \"compat\"){\r\n            window.location.replace(\"/compatibility/retake\")\r\n        } else if(this.state.compToRender === \"auth\"){\r\n            compToRender = <div>\r\n                <h3>{this.state.error}</h3>\r\n                <div><input onChange={this.updateInput.bind()} placeholder=\"Name\" name=\"name\" value={this.state.inputs.name}/></div>\r\n                <div><input onChange={this.updateInput.bind()} placeholder=\"Email\" name=\"email\" value={this.state.inputs.email}/></div>\r\n                <div><input onChange={this.updateInput.bind()} placeholder=\"Old password\" name=\"oldPassword\" value={this.state.inputs.oldPassword}/></div>\r\n                <div><input onChange={this.updateInput.bind()} placeholder=\"New password\" name=\"newPassword\" value={this.state.inputs.newPassword}/></div>\r\n                <button style={{marginTop: \"12px\"}} type=\"none\" onClick={this.handleAuthSubmit}>Submit</button>\r\n            </div>\r\n        } else if(this.state.compToRender === \"pic\"){\r\n            compToRender = <AvatarImg submitImg={this.submitImg} />\r\n        } else if(this.state.compToRender === \"images\"){\r\n            compToRender = <div style={{width: \"90%\", margin: \"auto\"}}><ImgUpload profileImgs={this.state.user.profileImgs} /></div>\r\n        } else if(this.state.compToRender === \"deactivate\"){\r\n            compToRender = <div style={{margin: \"15px 10px\", paddingBottom: \"7px\", border: \"2px solid rgb(110, 211, 207)\"}}>\r\n                <h3>Are you sure you want to deactivate your account? This action cannot be undone.</h3>\r\n                {this.state.message === null ? <div><button onClick={this.deleteAcct}>Yes</button>\r\n                <button onClick={() => this.setState({compToRender: null})}>Cancel</button></div> : <h4>{this.state.message}</h4>}\r\n            </div>\r\n            \r\n            \r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {this.state.message ? <div style={{border: \"2px solid rgb(110, 211, 207)\", width: \"90vw\", margin: \"15px auto\"}}><h2>{this.state.message}</h2></div> : null}\r\n                <div onClick={() => this.compToRender(\"auth\")}><h2>Account Login Info</h2></div>\r\n                <div onClick={() => this.compToRender(\"pic\")}><h2>Avatar Image</h2></div>\r\n                <div onClick={() => this.compToRender(\"images\")}><h2>Profile pictures</h2></div>\r\n\r\n                <div onClick={() => this.compToRender(\"starter\")}><h2>Personal Info</h2></div>\r\n                <div onClick={() => this.compToRender(\"basic\")}><h2>About You</h2></div>\r\n                <div onClick={() => this.compToRender(\"compat\")}><h2>Compatibility test</h2></div>\r\n                <div onClick={() => this.compToRender(\"deactivate\")}><h2>Deactivate Account</h2></div>\r\n\r\n                {compToRender}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token,\r\n        image: state.image,\r\n        modalType: state.modalType\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        imgCrop: (fileObj) => dispatch({type: \"IMG_CROP\", fileObj: fileObj}),\r\n        deactivate: () => dispatch({type: \"DEACTIVATE\"}),\r\n        nullImg: () => dispatch({type: \"SET_IMG\", fileObj: null}),\r\n        logoutRedux: () => dispatch({type: \"LOGOUT\"}),\r\n        newMessage: (op, convo) => dispatch({type: \"NEW_MSG\", op: op, convo: convo}),\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileSettings)","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\UserList\\UserList.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\MessageBox\\MessageBox.js",["156","157"],"import React from 'react'\r\nimport ConvoPage from '../ConvoPage/ConvoPage'\r\nimport \"./MessageBox.css\"\r\nimport {connect} from 'react-redux'\r\nimport {NavLink} from 'react-router-dom'\r\nimport Loader from '../Loader/Loader'\r\n\r\nclass MessageBox extends React.Component {\r\n\r\n    state = {\r\n        convos: [],\r\n        loaded: false,\r\n        currentConvo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Convos were added to Redux state upon login \r\n        //Add convos to state upon mount\r\n        // this.setState({convos: this.props.convos, loaded: true})\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/messages\", {\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            },\r\n            method: \"GET\",\r\n\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else if(res.status === 401){\r\n                    this.props.logoutRedux()\r\n                    window.location.replace(\"/auth\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n                          \r\n            return res.json();\r\n                \r\n        }).then(res => {\r\n            this.setState({convos: res.convos, loaded: true})\r\n        }).catch(err => {\r\n            console.log(err)\r\n            this.setState({loaded: true, error: err.message})\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        \r\n        \r\n    }\r\n    \r\n    render(){\r\n\r\n        if(this.state.loaded === false){\r\n            return <Loader />\r\n        }\r\n\r\n        let display = null\r\n\r\n        if(this.state.error){\r\n            return <h4>{this.state.message}</h4>\r\n        }\r\n        \r\n        if(this.state.convos.length === 0 && this.state.loaded === true){\r\n            return <h4>You haven't started any conversations. Message someone and start talking today!</h4>\r\n        } \r\n        \r\n        if(this.state.convos.length > 0 ){\r\n                display = this.state.convos.map((convo, idx) => {\r\n                    let color = null\r\n                    if(convo.read === false){\r\n                        color = \"rgb(45, 45, 64)\"\r\n                    }\r\n                    let messagePrev = null\r\n                    if(convo.messages[convo.messages.length-1].content.length <= 40) {\r\n                        messagePrev = convo.messages[convo.messages.length-1].content\r\n                    } else if(convo.messages[convo.messages.length-1].content.length > 40){\r\n                        messagePrev = convo.messages[convo.messages.length-1].content.slice(0,40) + \"...\"\r\n                    }\r\n                    return (<NavLink style={{margin: \"20px\"}} key={idx} to={\"/conversations/\" + convo.otherUser.id}>\r\n                        <div className=\"mobileCollapse\" style={{width: \"77%\", padding: \"10px 0\", marginLeft: \"6%\", border: \"rgb(45, 45, 64) 2px solid\", backgroundColor: color}}>\r\n                            <div style={{flex: \"1\", padding: \"0 10px\", textAlign: \"left\"}}>\r\n                                <img className=\"avImgMessages\" src={convo.otherUser.avatarImg} />\r\n\r\n                            </div>\r\n                            <div style={{flex: \"3\", justifyContent: \"center\", margin: \"auto\"}}>\r\n                                <h5 style={{fontSize: \"32px\"}}>{convo.otherUser.name}</h5>\r\n                                <h6 style={{fontSize: \"18px\"}}>{convo.messages[convo.messages.length-1].sentAt.time}</h6>\r\n                                {messagePrev !== null ? <h6 style={{fontSize: \"28px\"}}><i>\"{messagePrev}\"</i></h6> : null}\r\n                            </div>\r\n\r\n                    </div></NavLink>)\r\n                })\r\n            \r\n        } \r\n\r\n        \r\n\r\n        //if loaded and no convos. \"No conversations. Message a user and start talking today!\"\r\n\r\n        //if loaded with convos, map through convos creating a display box to show each user and a preview of the convo. Onclick opens the convo\r\n            //send convo object as a prop to the convo page component\r\n        return (\r\n            <div>\r\n                <h2 style={{fontSize: \"44px\", textAlign: \"left\", margin: \"22px 6%\", marginBottom: \"0\"}}>Messages</h2>\r\n                {this.state.message ? <h3>{this.state.message}</h3>: null}\r\n                {display}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logoutRedux: () => dispatch({type: \"LOGOUT\"})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox)","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\HomePage\\HomePage.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ConvoPage\\ConvoPage.js",["158"],"import React from 'react'\r\nimport {connect } from 'react-redux'\r\nimport Message from '../Message/Message'\r\nimport \"./ConvoPage.css\"\r\nimport Loader from '../Loader/Loader'\r\n\r\nclass ConvoPage extends React.Component {\r\n\r\n\r\n    state = {\r\n        convo: {},\r\n        currentMessage: \"\",\r\n        loaded: false,\r\n        convoId: null,\r\n        error: null\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //if received convo as prop, setState convoStarted to true and conversation to this.props.convo\r\n        const otherUserId = this.props.location.pathname.split(\"/\")[2]\r\n        fetch(process.env.REACT_APP_BACKEND + \"/user/checkConvo/\" + otherUserId, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            }\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 500){\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                } else if(res.status === 418){\r\n                    throw new Error(\"User account not found. It appears that this user deleted their account\")\r\n                } else if(res.status === 401){\r\n                    this.props.logoutRedux()\r\n                    window.location.replace(\"/auth\")\r\n                } else {\r\n                    throw new Error(\"Issue fetching Profile data. Try again.\")\r\n                }\r\n            }\r\n                          \r\n            return res.json();\r\n        }).then(res => {\r\n            if(res.convo.hasOwnProperty(\"_id\")){\r\n                this.props.newMessage(\"remove\", res.convo_id)\r\n                this.setState({convoId: res.convo._id})\r\n            }\r\n            this.setState({loaded: true, convo: res.convo})\r\n            this.scrollToBottom()\r\n        }).catch(err => {\r\n            this.setState({error: err.message})\r\n        })\r\n    }\r\n\r\n    submitMessage = () => {\r\n        if(this.state.currentMessage === \"\"){\r\n            return\r\n        }\r\n\r\n        this.setState({error: null})\r\n\r\n        const formData = new FormData()\r\n\r\n        formData.append(\"content\", this.state.currentMessage)\r\n        formData.append(\"otherUserId\", this.state.convo.otherUser.id)\r\n\r\n        //if convostarted is true, send request to newMessage route\r\n        if(this.state.convoId !== null){\r\n            formData.append(\"convoId\", this.state.convoId)\r\n            fetch(process.env.REACT_APP_BACKEND + \"/user/messages/newMessage\", {\r\n            headers: {\r\n                Authorization: \"Bearer \" + this.props.token\r\n            },\r\n            method: \"POST\",\r\n            body: formData\r\n        }).then(res => {\r\n                if(res.status !== 200 && res.status !== 201){\r\n                    if(res.status === 422){\r\n                        throw new Error(\"Failed to send message\")\r\n                    } else if(res.status === 401){\r\n                        this.props.logoutRedux()\r\n                        window.location.replace(\"/auth\")\r\n                    } else if(res.status === 418){\r\n                        throw new Error(\"Message failed. Receiving user not found.\")\r\n                    } else {\r\n                        throw new Error(\"Failed to send message\")\r\n                    }\r\n                }\r\n                return res.json()\r\n        }).then(res => {\r\n            this.setState({convo: {...this.state.convo, messages: [...this.state.convo.messages, res.msg]}, currentMessage: \"\"})\r\n            this.scrollToBottom()\r\n        }).catch(err => {\r\n            this.setState({error: err.message})\r\n        })\r\n        }\r\n\r\n        //if convostarted is false, send request to newConvo route\r\n        if(this.state.convoId === null){\r\n            fetch(process.env.REACT_APP_BACKEND + \"/user/messages/newConvo\", {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + this.props.token\r\n                },\r\n                method: \"POST\",\r\n                body: formData\r\n            }).then(res => {\r\n                if(res.status !== 200 && res.status !== 201){\r\n                    if(res.status === 422){\r\n                        throw new Error(\"failed\")\r\n                    } else if(res.status === 401){\r\n                        this.props.logoutRedux()\r\n                        window.location.replace(\"/auth\")\r\n                    } else {\r\n                        throw new Error(\"failure\")\r\n                    }\r\n                }\r\n                return res.json()\r\n            }).then(res => {\r\n                \r\n                this.setState({convo: res.convo, currentMessage: \"\", convoId: res.convo._id})\r\n            }).catch(err => {\r\n                this.setState({error: err.message})\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    inputChange = (e) => {\r\n        this.setState({currentMessage: e.target.value})\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        var div = document.getElementById(\"convoBox\");\r\n        div.scrollTop = div.scrollHeight - div.clientHeight;\r\n    }\r\n\r\n    writeMessage = () => {\r\n        document.getElementById('sendMsg').scrollIntoView();\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.loaded === false){\r\n            return <div style={{marginTop: \"40px\"}}><Loader /></div>\r\n\r\n        }\r\n\r\n        let display = null\r\n\r\n        if(this.state.error){\r\n            return display = <h3>{this.state.error}</h3>\r\n        }\r\n        //if convostarted  is true, map conversation.messages\r\n            //if current user sent is true, display message in quote box and peg to right, else display message from the left\r\n                //put time on each message. If message date sent at is not equal to prior message or is first message, print date above message\r\n        if(this.state.convoId !== null && this.state.loaded === true){\r\n            display = this.state.convo.messages.map((msg, idx) => {\r\n                // if(msg.currentUserSent === true){\r\n                //     return <div key={idx} style={{backgroundColor: \"rgb(110, 211, 207)\"}}><p>{msg.content}</p></div>\r\n                // } else {\r\n                //     return <div key={idx} style={{backgroundColor: \"lime\"}}><p>{msg.content}</p></div>\r\n                // }\r\n                return <Message key={idx} content={msg.content} sent={msg.currentUserSent} />\r\n            })\r\n        } else {\r\n            display = <h4>No Messages yet</h4>\r\n        }\r\n        //if convo started is false, render no messages\r\n        return (\r\n            <div style={{marginTop: \"30px\"}}>\r\n\r\n                {this.state.convo.messages.length > 3 ? <button className=\"defButton hideDesktop\" type=\"none\" onClick={this.writeMessage}>Send Response</button> : null}\r\n                \r\n                <div  id=\"convoBox\" style={{border: \"black 2px solid\", margin: \"20px 10px\", backgroundColor: \"rgb(85, 85, 97)\", maxHeight: \"50vh\"}}>\r\n                    {display}\r\n\r\n                </div>\r\n                <div className=\"mobileCollapse\">\r\n                    {this.state.convo.hasOwnProperty(\"otherUser\") ? <div style={{flex: \"1\", marginLeft: \"10px\"}}>\r\n                    \r\n                    <img id=\"convoAvImg\" style={{display: \"inline-block\"}} src={this.state.convo.otherUser.avatarImg} /></div> : null} \r\n                    <div id=\"sendMsg\" style={{flex: \"2\", padding: \"10px 10%\"}}>\r\n                        <h3 style={{marginTop: \"10px\"}}>{this.state.convo.otherUser.name}</h3>\r\n                        <input style={{width: \"80%\", height: \"35px\", fontSize: \"18px\"}} type=\"text\" value={this.state.currentMessage} onChange={this.inputChange.bind()} placeholder=\"Write message here\" />\r\n                        <button className=\"defButton\" style={{width: \"20%\", height: \"35px\", boxShadow: \"none\", marginTop: \"10px\"}} type=\"none\" onClick={this.submitMessage}>Send</button>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUserId: state.currentUserId,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        newMessage: (op, convo) => dispatch({type: \"NEW_MSG\", op: op, convo: convo}),\r\n        logoutRedux: () => dispatch({type: \"LOGOUT\"})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConvoPage)","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Compatibility.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Loader\\Loader.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Backdrop\\Backdrop.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\ProfInfo\\Signup.js",["159"],"import React from 'react';\r\nimport {connect} from 'react-redux';\r\n//import * as actionTypes from '../../Store/actionTypes';\r\nimport ReactCrop from 'react-image-crop';\r\nimport Starter from './Starter';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Signup.css'\r\nimport AvatarImg from '../AvatarImg/AvatarImg'\r\n\r\n\r\n\r\nclass Authenticate extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputOpenFileRef = React.createRef()\r\n        this.state = {\r\n            imgSrc: null,\r\n            crop: {\r\n                aspect: 1,\r\n            },\r\n            continueSignup: false,\r\n            essentials: {\r\n                isMale: null,\r\n                name: \"\"\r\n            },\r\n            image: null\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    validInputs = () => {\r\n        if(this.props.pass.length < 8 || this.props.pass.length > 30){\r\n            this.setState({error: \"Your password should be between 8 and 30 characters\"})\r\n        }\r\n        if(this.props.pass !== this.props.confPass){\r\n            this.setState({error: \"Your passwords do not match\"})\r\n\r\n        }\r\n        if(!this.validEmail(this.props.email)){\r\n            this.setState({error: \"Not a valid email address. Example: abcd1234@gmail.com\"})\r\n        }\r\n        if(this.state.essentials.isMale === null){\r\n            this.setState({error: \"Select a gender\"})\r\n        }\r\n        if(this.state.essentials.name.length < 1){\r\n            this.setState({error: \"Enter a name\"})\r\n        }\r\n        if(this.props.image === null){\r\n            this.setState({error: \"Image not selected. Select an image file to upload and crop it into a square.\"})\r\n\r\n        }\r\n    }\r\n\r\n    validEmail = (email) => {        \r\n        const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return regexp.test(email);\r\n    }\r\n\r\n    loadRest = async() => {\r\n        //Sanitize and validate before continuing and loading the rest of page\r\n        this.setState({error: null})\r\n        this.props.setErr(\"null\")\r\n\r\n        \r\n        await this.validInputs()\r\n        \r\n        if(!this.state.error && this.state.continueSignup === false){\r\n            this.setState({continueSignup: true})\r\n\r\n        } else if(this.state.error && !this.props.error){\r\n            this.props.setErr(this.state.error)\r\n        }\r\n    }\r\n\r\n    uponSignupSubmit = async (age, location, bio) => {\r\n        await this.loadRest()\r\n        let profObj = {\r\n            age,\r\n            location,\r\n            bio,\r\n            name: this.state.essentials.name,\r\n            isMale: this.state.essentials.isMale\r\n        }\r\n\r\n        \r\n        this.props.uponSignupSubmit(profObj)\r\n    }\r\n\r\n    openFileInput = () => {\r\n        this.inputOpenFileRef.current.value = \"\"\r\n        this.inputOpenFileRef.current.click()\r\n    }\r\n\r\n    render() {\r\n        let signup\r\n\r\n        if(this.state.continueSignup === true){\r\n            signup = <Starter setErr={this.props.setErr.bind()} edit={false} uponSignupSubmit={this.uponSignupSubmit.bind()}/>\r\n        }\r\n\r\n        \r\n\r\n        return <React.Fragment>\r\n            <div className=\"Auth authForm\">\r\n                <h1>Signup</h1>\r\n\r\n                <AvatarImg />\r\n\r\n                <div style={{display: \"flex\", padding: \"0\", marginTop: \"20px\"}}>\r\n                <div style={this.state.essentials.isMale === true ? {paddingLeft: \"10px\", marginRight: \"6px\", flex: \"1\", backgroundColor: \"rgb(45, 45, 64)\", border: \"blue 2px solid\", color: \"white\", flexDirection: \"column\"} : {paddingLeft: \"10px\", marginRight: \"6px\", flex: \"1\", border: \"blue 2px solid\", flexDirection: \"column\", color: \"blue\"}} onClick={() => this.setState({essentials: {...this.state.essentials, isMale: true}})}><h5> I am a man </h5></div>\r\n                <div style={this.state.essentials.isMale === false ? {paddingLeft: \"10px\", marginLeft: \"6px\", flex: \"1\", backgroundColor: \"rgb(45, 45, 64)\", border: \"pink 2px solid\", flexDirection: \"column\", color: \"white\"} : {paddingLeft: \"10px\", marginLeft: \"6px\", flex: \"1\", border: \"pink 2px solid\", flexDirection: \"column\", color: \"pink\"}} onClick={() => this.setState({essentials: {...this.state.essentials, isMale: false}})}><h5>I am a woman</h5></div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n                <label for=\"name\">Name</label>\r\n                <input style={this.state.essentials.name ? {backgroundColor: \"rgb(45, 45, 64)\", color: \"white\"} : {border: \"rgb(110, 211, 207) 2px solid\"}} type=\"text\" placeholder=\"Name\" name=\"name\" value={this.state.essentials.name} onChange={(input) => this.setState({essentials: {...this.state.essentials, name: input.target.value}})} />\r\n\r\n                <label for=\"email\" >Email (ex. abc123@gmail.com)</label>\r\n                <input autoComplete=\"new-password\" style={this.props.email.includes('@') && this.props.email.includes('.') ? {backgroundColor: \"rgb(45, 45, 64)\", color: \"white\"} : {border: \"rgb(110, 211, 207) 2px solid\"}} type=\"text\" placeholder=\"Email\" name=\"email\" value={this.props.email} onChange={this.props.UPDATE} />\r\n                <label for=\"pass\" >Password (8-30 letters)</label>\r\n                <input autoComplete=\"new-password\" style={this.props.pass.length >= 8 && this.props.pass.length <= 30 ? {backgroundColor: \"rgb(45, 45, 64)\", color: \"white\"} : {border: \"rgb(110, 211, 207) 2px solid\"}} type=\"password\" placeholder=\"Password\" name=\"pass\" value={this.props.pass} onChange={this.props.UPDATE} />\r\n                <label for=\"confPass\" >Password (8-30 letters)</label>\r\n                <input autoComplete=\"new-password\" style={this.props.confPass.length >= 8 && this.props.confPass.length <= 30 ? {backgroundColor: \"rgb(45, 45, 64)\", color: \"white\"} : {border: \"rgb(110, 211, 207) 2px solid\"}} type=\"password\" placeholder=\"Confirm Password\" name=\"confPass\" value={this.props.confPass} onChange={this.props.UPDATE} />\r\n                {!this.state.continueSignup ? <button type=\"none\" onClick={this.loadRest}>Continue Signup</button> : null}\r\n\r\n                {!this.state.continueSignup ? <button onClick={this.props.switchComp} >Switch to Login</button> : null}\r\n\r\n\r\n\r\n                </div>\r\n            {signup}\r\n\r\n        </React.Fragment>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        image: state.image\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        userLogin: (userId, userName, token) => dispatch({type: \"USER_LOGIN\", userId: userId, userName: userName, token: token}),\r\n        imgCrop: (fileObj) => dispatch({type: \"IMG_CROP\", fileObj: fileObj})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticate);","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Cropper\\Cropper.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\NavMobile\\NavMobile.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Authenticate\\Login.js",["160","161"],"import React from 'react';\r\nimport {connect} from 'react-redux';\r\n//import * as actionTypes from '../../Store/actionTypes';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport './Login.css';\r\n\r\n\r\n\r\nclass Authenticate extends React.Component {\r\n    \r\n    state = {\r\n        error: null\r\n    }\r\n\r\n    validInputs = () => {\r\n        if(this.props.pass.length < 8 || this.props.pass.length > 30){\r\n            this.setState({error: \"Your password should be between 8 and 30 characters\"})\r\n        }\r\n        if(!this.validEmail(this.props.email)){\r\n            this.setState({error: \"Not a valid email address. Example: abcd1234@gmail.com\"})\r\n        }\r\n\r\n    }\r\n\r\n    validEmail = (email) => {        \r\n        const regexp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return regexp.test(email);\r\n    }\r\n\r\n    submitLogin = () => {\r\n\r\n        \r\n        //post request to api/login\r\n        //backend find user by email\r\n        //if user is found...\r\n        fetch(process.env.REACT_APP_BACKEND + '/login', {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: this.props.email,\r\n                password: this.props.pass,\r\n            })\r\n        }).then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                if(res.status === 404){\r\n                    throw new Error(\"Login failed! Email not found\")\r\n                } else if(res.status === 403){\r\n                    throw new Error(\"Login failed! Password incorrect\")\r\n                } else if(res.status === 500){\r\n                    throw new Error(\"There seems to be a server error. Refresh and try again.\")\r\n                } else {\r\n                    throw new Error(\"Login failed! Email and password combo do not match\")\r\n                }\r\n            }\r\n            return res.json();            \r\n        }).then(res => {\r\n            if(res.convos.length > 0){\r\n                const convoArr = []\r\n                res.convos.map(convo => {\r\n                    if(convo.read === false){\r\n                        convoArr.push(convo._id)\r\n                    }\r\n                })\r\n                this.props.newMessage(\"add\", convoArr)\r\n\r\n            }\r\n            this.props.loginSuccess(res.userId, res.userName, res.token, res.isMale)\r\n            \r\n\r\n        }).catch(err => {\r\n            this.props.setErr(err.message)\r\n        })            \r\n    }\r\n\r\n    submitAuth =  async (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.setErr(\"null\")\r\n        this.setState({error: null})\r\n\r\n        await this.validInputs()\r\n\r\n\r\n        if(!this.state.error){\r\n            await this.setState({email: this.props.email.toLowerCase()})\r\n            this.submitLogin();\r\n        } else if(this.state.error && !this.props.error){\r\n            this.props.setErr(this.state.error)\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"Auth\">\r\n                <h1>Login</h1>\r\n                <form className=\"authForm\" onSubmit={this.submitAuth}>\r\n                    \r\n\r\n                    <label for=\"email\" >Email (ex. abc123@gmail.com)</label>\r\n                    <input autoComplete=\"new-password\" type=\"text\" placeholder=\"Email\" name=\"email\" value={this.props.email} onChange={this.props.UPDATE} />\r\n                    <label for=\"pass\" >Password (8-30 letters)</label>\r\n                    <input autoComplete=\"new-password\" type=\"password\" placeholder=\"Password\" name=\"pass\" value={this.props.pass} onChange={this.props.UPDATE} />\r\n\r\n                    <a href=\"/forgotPassword\">Forgot your password?</a>\r\n\r\n                    <button type=\"none\" onClick={this.submitAuth}>Login</button>\r\n                    <button onClick={this.props.switchComp} type=\"none\" >Switch to Signup</button>\r\n                </form>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        newMessage: (op, convo) => dispatch({type: \"NEW_MSG\", op: op, convo: convo}),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticate);","C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\AvatarImg\\AvatarImg.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\LazyImage\\LazyImage.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Message\\Message.js",[],"C:\\Users\\Michael\\Documents\\mern-project\\client\\src\\components\\Cropper\\ImageUtil.js",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":79,"column":41,"nodeType":"168","messageId":"169","endLine":79,"endColumn":43},{"ruleId":"170","severity":1,"message":"171","line":110,"column":9,"nodeType":"172","messageId":"173","endLine":111,"endColumn":25},{"ruleId":"174","severity":1,"message":"175","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":15},{"ruleId":"174","severity":1,"message":"178","line":27,"column":7,"nodeType":"176","messageId":"177","endLine":27,"endColumn":13},{"ruleId":"174","severity":1,"message":"179","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"180","severity":1,"message":"181","line":170,"column":9,"nodeType":"182","messageId":"183","endLine":170,"endColumn":135},{"ruleId":"180","severity":1,"message":"181","line":180,"column":9,"nodeType":"182","messageId":"183","endLine":199,"endColumn":53},{"ruleId":"166","severity":1,"message":"167","line":176,"column":33,"nodeType":"184","messageId":"185","endLine":176,"endColumn":39},{"ruleId":"174","severity":1,"message":"186","line":2,"column":20,"nodeType":"176","messageId":"177","endLine":2,"endColumn":28},{"ruleId":"187","severity":1,"message":"188","line":243,"column":109,"nodeType":"189","endLine":243,"endColumn":153},{"ruleId":"187","severity":1,"message":"188","line":255,"column":109,"nodeType":"189","endLine":255,"endColumn":153},{"ruleId":"187","severity":1,"message":"188","line":271,"column":109,"nodeType":"189","endLine":271,"endColumn":153},{"ruleId":"187","severity":1,"message":"188","line":275,"column":109,"nodeType":"189","endLine":275,"endColumn":153},{"ruleId":"187","severity":1,"message":"188","line":276,"column":109,"nodeType":"189","endLine":276,"endColumn":153},{"ruleId":"187","severity":1,"message":"188","line":145,"column":20,"nodeType":"189","endLine":145,"endColumn":115},{"ruleId":"174","severity":1,"message":"190","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":13},{"ruleId":"191","severity":1,"message":"192","line":91,"column":39,"nodeType":"193","messageId":"194","endLine":91,"endColumn":41},{"ruleId":"191","severity":1,"message":"192","line":91,"column":67,"nodeType":"193","messageId":"194","endLine":91,"endColumn":69},{"ruleId":"191","severity":1,"message":"192","line":94,"column":46,"nodeType":"193","messageId":"194","endLine":94,"endColumn":48},{"ruleId":"191","severity":1,"message":"192","line":94,"column":74,"nodeType":"193","messageId":"194","endLine":94,"endColumn":76},{"ruleId":"174","severity":1,"message":"195","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":17},{"ruleId":"187","severity":1,"message":"188","line":84,"column":33,"nodeType":"189","endLine":84,"endColumn":98},{"ruleId":"187","severity":1,"message":"188","line":180,"column":21,"nodeType":"189","endLine":180,"endColumn":121},{"ruleId":"174","severity":1,"message":"196","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":17},{"ruleId":"174","severity":1,"message":"196","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":17},{"ruleId":"166","severity":1,"message":"167","line":63,"column":38,"nodeType":"168","messageId":"169","endLine":63,"endColumn":40},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-unused-vars","'Starter' is defined but never used.","Identifier","unusedVar","'socket' is assigned a value but never used.","'Component' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","ReturnStatement","expectedReturnValue","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Modal' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'ConvoPage' is defined but never used.","'ReactCrop' is defined but never used.","no-global-assign","no-unsafe-negation"]